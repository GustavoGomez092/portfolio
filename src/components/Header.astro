---
import { Image } from "astro:assets"
import { ContentCollections } from "../collections/types"
import { getCollection } from "astro:content"
import Logo from "../assets/img/logo.svg"

const menu = await getCollection(ContentCollections.MENU)
---

<nav>
  <div class="logo-area">
    <div class="logo hoverable">
      <Image src={Logo} width={50} height={50} alt="Logo" loading="eager" />
    </div>
  </div>
  <div class="menu">
    <ul class="menu-list">
      {
        menu.map((item) => {
          return (
            <li class="menu-item hoverable">
              <a href={item.data.url}  data-offset={item.data.offset}>{item.data.title}</a>
            </li>
          )
        })
      }
    </ul>
  </div>
  <div class="call-to-action">
    <a href="" class="btn hoverable">Download Resume</a>
  </div>
</nav>

<script>
  import gsap from "gsap"
  import { ScrollTrigger } from "gsap/all"
  import { LifecycleManager } from "../scripts/animationLifecycle.ts"
  import { $smoothScroll } from "../stores/smoothScrollStore"
  import { $introComplete } from "../stores/introStore"
  import g1 from "../assets/img/g/1.png"
  import g2 from "../assets/img/g/2.png"
  import g3 from "../assets/img/g/3.png"
  import g4 from "../assets/img/g/4.png"
  import g5 from "../assets/img/g/5.png"
  import g6 from "../assets/img/g/6.png"
  import g7 from "../assets/img/g/7.png"
  import g8 from "../assets/img/g/8.png"
  import g9 from "../assets/img/g/9.png"
  import g10 from "../assets/img/g/10.png"
  import g11 from "../assets/img/g/11.png"
  import g12 from "../assets/img/g/12.png"
  import g13 from "../assets/img/g/13.png"
  import g14 from "../assets/img/g/14.png"
  import g15 from "../assets/img/g/15.png"
  import g16 from "../assets/img/g/16.png"
  import g17 from "../assets/img/g/17.png"
  import g18 from "../assets/img/g/18.png"
  import g19 from "../assets/img/g/19.png"

  gsap.registerPlugin(ScrollTrigger)
  const manager = new LifecycleManager()

  // change image on logo hover every 0.5s on hover
  const logoDresser = () => {
    const logo: HTMLImageElement | null = document.querySelector(
      "nav div.logo-area > div.logo > img"
    )
    if (!logo) return
    const images = [
      g1,
      g2,
      g3,
      g4,
      g5,
      g6,
      g7,
      g8,
      g9,
      g10,
      g11,
      g12,
      g13,
      g14,
      g15,
      g16,
      g17,
      g18,
      g19,
    ]
    let index = 0

    logo.addEventListener("mouseover", () => {
      if (logo) {
        index = Math.floor(Math.random() * images.length)
        logo.src = images[index].src
      }
    })
  }

  const animateHeader = (header: HTMLElement) => {
    manager.ctx?.add(() => {
      gsap.timeline().to(header, {
        duration: 1,
        opacity: 1,
        delay: 0,
        ease: "power2.inOut",
        onComplete: () => {
          $smoothScroll.value.paused(false)
        },
      })
    })
  }

  manager.onElementLoaded("nav", () => {
    logoDresser()
    const header = document.querySelector("nav")
    if (!header) return
    // gsap.set(header, { opacity: 0 })
    $smoothScroll.value.paused(true)
    $introComplete.listen(() => {
      if ($introComplete.get()) {
        animateHeader(header)
      } else {
        return
      }
    })
    if ($introComplete.get()) {
      animateHeader(header)
    } else {
      return
    }
document.querySelectorAll("a").forEach((link) => {
  link.addEventListener("click", (e) => {
    if(!link.getAttribute("href")?.startsWith("#")) return
    e.preventDefault()
    const href = link.getAttribute("href")
    if (href && href.startsWith("#")) {
      const target = document.querySelector(href)
      const offset = parseInt(link.getAttribute("data-offset") || "0", 10) || 0
      if (target) {
        const smoother = $smoothScroll.value
        const targetY = (target as HTMLElement).offsetTop + offset

        gsap.to(smoother, {
          scrollTop: targetY,
          duration: 2,
          ease: "power2.inOut",
          onStart: () => {
            ScrollTrigger.update() // Update ScrollTrigger before the scroll
          },
          onComplete: () => {
            ScrollTrigger.update() // Update ScrollTrigger after the scroll
          },
        })
      }
    }
  })
})
  })
</script>

<style>
  @reference '../styles/global.css';
  nav {
    @apply w-full max-w-site mx-auto;
    @apply flex flex-col lg:flex-row justify-between items-center py-4 px-8 h-[90px] space-y-4;
    .logo-area {
      @apply flex items-center;
      .logo {
        @apply flex items-center gap-2 text-2xl font-bold text-gray-800 w-14 h-14;
        img {
          @apply w-full h-full object-contain;
        }
      }
    }
    .menu {
      .menu-list {
        @apply flex flex-row gap-10;
        .menu-item {
          a {
            @apply text-xl;
          }
        }
      }
    }
    .call-to-action {
      @apply flex gap-8;
      .btn {
        @apply text-xl opacity-50 transition-all duration-300 ease-in-out;
        &:hover {
          @apply opacity-100;
        }
      }
    }
  }
</style>
