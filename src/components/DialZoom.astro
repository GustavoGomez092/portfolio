---
import Card from "./Card.astro"
import { getCollection } from "astro:content";
import { ContentCollections } from "../collections/types.ts";

const abilities = await getCollection(ContentCollections.ABILITIES);
---
<section class="dial-zoom">
  <div class="dial-zoom-container">
    <div class="side-dial">
      <div class="unit"></div>
    </div>
    <div class="dial-zoom-content">
      <div class="cards-container">
        {
          abilities.map((ability, i) => (
            <Card key={i} Ability={ability.data.ability} highlights={ability.data.highlights} proficiency={ability.data.proficiency} description={ability.data.description} />
          ))
        }
      </div>
    </div>
  </div>
</section>

<script>
  import gsap from "gsap/all"
  import { LifecycleManager } from "../scripts/animationLifecycle.ts"
  import { $introComplete } from "../stores/introStore"

  const manager = new LifecycleManager()
  let units: HTMLElement[] = []
  let currentHoveredIndex = -1
  let animationTween: gsap.core.Tween | null = null

  const cloneUnit = () => {
    const unit = document.querySelector(".side-dial .unit")
    const container = document.querySelector(".side-dial")
    
    if (!unit || !container) {
      console.error("Unit or container not found")
      return
    }

    const containerHeight = container.clientHeight
    const unitCount = Math.floor(containerHeight / 0.025)

    const existingUnits = container.querySelectorAll(".unit")
    existingUnits.forEach((u, i) => i > 0 && u.remove())

    const fragment = document.createDocumentFragment()
    
    for (let i = 1; i < unitCount; i++) {
      const clone = unit.cloneNode(true) as HTMLElement
      if (i % 5 === 0) {
        clone.classList.add("marked")
      }
      fragment.appendChild(clone)
    }
    
    container.appendChild(fragment)
    
    // Cache units for better performance
    units = Array.from(container.querySelectorAll(".unit"))
  }

  const introAnimation = () => {
    gsap.fromTo(
      units,
      { scaleX: 0},
      { 
        scaleX: 1, 
        duration: 0.8, 
        stagger: {
          amount: 1.5,
          ease: "power2.out"
        },
        delay: 1, 
        ease: "back.out(1.2)"
      }
    )
  }

const smoothMouseDial = () => {
  const dial = document.querySelector(".dial-zoom .side-dial")
  if (!dial) return null

  let isAnimating = false
  let cardAnimationTween: gsap.core.Tween | null = null // Add separate tween for cards
  
  const animateUnits = (targetIndex: number) => {
    if (isAnimating && currentHoveredIndex === targetIndex) return
    
    currentHoveredIndex = targetIndex
    isAnimating = true
    
    // Kill previous animation
    if (animationTween) {
      animationTween.kill()
    }
    
    // Create scale values for all units at once
    const scales = units.map((_, index) => {
      const distance = Math.abs(index - targetIndex)
      if (distance === 0) return 2.5
      if (distance === 1) return 2.0
      if (distance === 2) return 1.5
      if (distance === 3) return 1.2
      return 1
    })

    const opacities = units.map((_, index) => {
      const distance = Math.abs(index - targetIndex)
      if (distance === 0) return 1
      if (distance === 1) return 0.8
      if (distance === 2) return 0.7
      if (distance === 3) return 0.5
      return 0.3
    })
    
    // Animate all units with a single tween for better performance
    animationTween = gsap.to(units, {
      scaleX: (index) => scales[index],
      opacity: (index) => opacities[index],
      duration: 0.4,
      ease: "power2.out",
      onComplete: () => {
        isAnimating = false
      }
    })
  }

  const animateCards = (targetIndex: number) => {
    const cardsContainer = document.querySelector(".dial-zoom .cards-container")
    if (!cardsContainer) return
    
    // Kill previous card animation
    if (cardAnimationTween) {
      cardAnimationTween.kill()
    }
    
    const containerHeight = cardsContainer.clientHeight
    const mappedOffset = gsap.utils.mapRange(0, 100, 0, containerHeight, targetIndex)
    
    cardAnimationTween = gsap.to(cardsContainer, {
      y: -mappedOffset,
      duration: 1, // Slightly longer duration for smoother movement
      ease: "power2.out", // Use consistent easing
      overwrite: "auto" // Automatically handle conflicting animations
    })
  }

  const resetUnits = () => {
    if (animationTween) {
      animationTween.kill()
    }
    
    // Also reset cards to initial position
    if (cardAnimationTween) {
      cardAnimationTween.kill()
    }
    
    const cardsContainer = document.querySelector(".dial-zoom .cards-container")
    if (cardsContainer) {
      cardAnimationTween = gsap.to(cardsContainer, {
        y: 0,
        duration: 0.6,
        ease: "power2.out"
      })
    }
    
    animationTween = gsap.to(units, {
      scaleX: 1,
      opacity: 1, // Reset opacity as well
      duration: 0.6,
      ease: "power2.out",
      onComplete: () => {
        isAnimating = false
        currentHoveredIndex = -1
      }
    })
  }

  // Use throttling to limit calculation frequency
  let rafId: number | null = null

  const handleMouseMove = (e: Event) => {
    if (!(e instanceof MouseEvent)) return;
    if (rafId) return
    
    rafId = requestAnimationFrame(() => {
      const rect = dial.getBoundingClientRect()
      const relativeY = e.clientY - rect.top
      
      // Improved mapping with bounds checking
      const mappedIndex = Math.max(0, Math.min(
        units.length - 1,
        Math.floor(gsap.utils.mapRange(0, rect.height, 0, units.length, relativeY))
      ))

      // debounce animation calls
      if (currentHoveredIndex === mappedIndex) {
        rafId = null
        return
      }
      
      animateUnits(mappedIndex)
      animateCards(mappedIndex)
      rafId = null
    })
  }

  dial.addEventListener("mousemove", handleMouseMove as EventListener, { passive: true })
  dial.addEventListener("mouseleave", resetUnits as EventListener, { passive: true })
}

  $introComplete.subscribe((value) => {
    if (value && units.length > 0) {
      introAnimation()
      smoothMouseDial()
    }
  })

  manager.onElementLoaded(".dial-zoom", () => {
    cloneUnit()
    
    if ($introComplete.get()) {
      introAnimation()
      smoothMouseDial()
    }
  })

</script>

<style>
  @reference '../styles/global.css';
  .dial-zoom {
    @apply w-full h-full relative p-6;
    .dial-zoom-container {
      @apply w-full h-full;
      .side-dial {
        @apply w-full h-fit flex flex-col absolute left-0 top-0 z-2;
        .unit {
          @apply w-3 h-0.25 bg-black origin-left my-1 opacity-30 transition-opacity;
          will-change: transform, opacity;
          &.marked {
            @apply w-5;
          }
        }
      }
    }
  }
</style>